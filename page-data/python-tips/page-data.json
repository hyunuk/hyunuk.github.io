{"componentChunkName":"component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-index-tsx","path":"/python-tips/","result":{"pageContext":{"article":{"banner":{"alt":"Python Tips","caption":"Photo by <u><a href=\"https://unsplash.com/photos/Nc5Q_CEcY44\">Florian Olivo</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8c8c8","images":{"fallback":{"src":"/static/1d7b0d0d6e7b145f968f65bfc40a39b4/91671/kelly-sikkema-Hl3LUdyKRic-unsplash.jpg","srcSet":"/static/1d7b0d0d6e7b145f968f65bfc40a39b4/7e3b4/kelly-sikkema-Hl3LUdyKRic-unsplash.jpg 165w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/47f88/kelly-sikkema-Hl3LUdyKRic-unsplash.jpg 330w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/91671/kelly-sikkema-Hl3LUdyKRic-unsplash.jpg 660w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/5aaff/kelly-sikkema-Hl3LUdyKRic-unsplash.jpg 1320w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/1d7b0d0d6e7b145f968f65bfc40a39b4/322ad/kelly-sikkema-Hl3LUdyKRic-unsplash.webp 165w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/de3b3/kelly-sikkema-Hl3LUdyKRic-unsplash.webp 330w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/2b2b5/kelly-sikkema-Hl3LUdyKRic-unsplash.webp 660w,\n/static/1d7b0d0d6e7b145f968f65bfc40a39b4/e36a7/kelly-sikkema-Hl3LUdyKRic-unsplash.webp 1320w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<p>Sometimes, you'll face problems that are not like a standard Leetcode style, which is with parameters and returns.\nProblem-solving websites such as Hackerrank or ACM-style provides problems with standard input/output.\nThis post is a small tip for the Python standard input and output.</p>\n<h2>Standard Output</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># print with a line change</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># print without a line change</span></code></pre></div>\n<h2>Standard Input</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># assume input is \"1 2 3\"</span>\n\n<span class=\"token comment\"># using input with single variable.</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># variable a is a string that reads the one whole line</span>\n\n<span class=\"token comment\"># using input with multiple variables</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;class 'str'></span>\n<span class=\"token comment\"># this will generate error if input is not splitted by 3</span>\n\n<span class=\"token comment\"># casting type of input</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 6</span>\n\n<span class=\"token comment\"># putting numbers into a list</span>\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1, 2, 3]</span>\n\n<span class=\"token comment\"># if you're not sure about the size of input</span>\nret <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\ntemp <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> temp<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">break</span>\nret<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># sys.stdin.read()</span>\n<span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> slower<span class=\"token punctuation\">,</span> so use sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> when you deal <span class=\"token keyword\">with</span> a large amount of data</code></pre></div>\n<h2>Small Tips</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># max/min numbers</span>\nmax_int <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>maxsize\nmin_int <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>sys<span class=\"token punctuation\">.</span>maxsize\n<span class=\"token comment\"># incrementing count in dict()</span>\ndic <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">:</span>\ncount <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ndic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># or</span>\ndic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dic<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> i <span class=\"token keyword\">in</span> dic <span class=\"token keyword\">else</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># queue: using queue by list() is slow due to the properties of lists, which is fast at the end but slow at the beginning operations, as every element has to be shifted one by one. So use deque() when you're implementing queue.</span>\nq <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># initialize 2d array</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># r = rows, c = columns</span>\n<span class=\"token comment\"># ASCII characters</span>\nA_ascii <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 65</span>\na_ascii <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 97</span>\nc_char <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># c</span>\nalphabet_order <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>c_char<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 2</span></code></pre></div>","categories":["Python","Coding interview"],"date":"December 25, 2020","description":"Python tips","id":"53856f56-c026-53ce-8c4e-4fb69393d771","keywords":["Python","Coding interview","Leetcode"],"slug":"/python-tips/","title":"Python tips","readingTime":{"text":"2 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["1094019748","460736852"],"slicesMap":{}}